#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#import <MapboxGeocoder/MapboxGeocoder.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxGeocoder",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("AdminPointResult")
@interface AdminPointResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Objects that conform to the <code>BatchGeocodeOptions</code> protocol specify the criteria for batch geocoding results returned by the Mapbox Geocoding API.
/// You can include up to 50 forward geocoding queries in a single request. Each query in a batch request counts individually against your account’s rate limits.
/// Pass an object conforming to this protocol into the <code>Geocoder.batchGeocode(_:completionHandler:)</code> method.
SWIFT_PROTOCOL_NAMED("BatchGeocodeOptions")
@protocol MBBatchGeocodeOptions
@end



@class MBRectangularRegion;

/// A structure that specifies the criteria for results returned by the Mapbox Geocoding API.
/// You do not create instances of <code>GeocodeOptions</code> directly. Instead, you create instances of <code>ForwardGeocodeOptions</code> and <code>ReverseGeocodeOptions</code>, depending on the kind of geocoding you want to perform:
/// <ul>
///   <li>
///     <em>Forward geocoding</em> takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query. To perform forward geocoding, use a <code>ForwardGeocodeOptions</code> object.
///   </li>
///   <li>
///     <em>Reverse geocoding</em> takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location. To perform reverse geocoding, use a <code>ReverseGeocodeOptions</code> object.
///   </li>
/// </ul>
/// Pass an instance of either class into the <code>Geocoder.geocode(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("GeocodeOptions")
@interface MBGeocodeOptions : NSObject
/// An array of <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> country codes specifying the countries in which the results may lie. The codes may appear in any order and are case-insensitive.
/// By default, no country codes are specified.
/// To find out what kinds of results are available for a particular country, consult <a href="https://www.mapbox.com/geocoding/#coverage">the Geocoding API’s coverage map</a>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable allowedISOCountryCodes;
/// A location to use as a hint when looking up the specified address.
/// This property prioritizes results that are close to a specific location, which is typically the user’s current location. If the value of this property is <code>nil</code> – which it is by default – no specific location is prioritized.
@property (nonatomic, strong) CLLocation * _Nullable focalLocation;
/// The bitmask of placemark scopes, such as country and neighborhood, to include in the results.
/// The default value of this property is <code>PlacemarkScope.all</code>, which includes all scopes.
@property (nonatomic) MBPlacemarkScope allowedScopes;
/// The region in which each resulting placemark must be located.
/// By default, no region is specified, so results may be located anywhere in the world.
@property (nonatomic, strong) MBRectangularRegion * _Nullable allowedRegion;
/// Limit the number of results returned. For forward geocoding, the default is <code>5</code> and the maximum is <code>10</code>. For reverse geocoding, the default is <code>1</code> and the maximum is <code>5</code>.
@property (nonatomic) NSUInteger maximumResultCount;
/// The locale in which results should be returned.
/// This property affects the language of returned results; generally speaking, it does not determine which results are found. If the Geocoding API does not recognize the language code, it may fall back to another language or the default language. Components other than the language code, such as the country and script codes, are ignored.
/// By default, this property is set to <code>nil</code>, causing results to be in the default language.
/// experiment:
/// This option is experimental.
@property (nonatomic, copy) NSLocale * _Nullable locale;
/// A Boolean value that determines whether the resulting placemarks have the <code>Placemark.routableLocation</code> property set.
@property (nonatomic) BOOL includesRoutableLocations;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CNPostalAddress;

/// A structure that specifies the criteria for forward geocoding results. Forward geocoding takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query.
SWIFT_CLASS_NAMED("ForwardGeocodeOptions")
@interface MBForwardGeocodeOptions : MBGeocodeOptions
/// Initializes a forward geocode options object with the given query string.
/// \param query A place name or address to search for. The query may have a maximum of 20 words or numbers; it may have up to 256 characters including spaces and punctuation.
///
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query;
/// Initializes a forward geocode options object with the given postal address object.
/// \param postalAddress A <code>CNPostalAddress</code> object to search for.
///
- (nonnull instancetype)initWithPostalAddress:(CNPostalAddress * _Nonnull)postalAddress SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


/// A structure that specifies the criteria for forward batch geocoding results. Forward geocoding takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query.
SWIFT_CLASS_NAMED("ForwardBatchGeocodeOptions")
@interface MBForwardBatchGeocodeOptions : MBForwardGeocodeOptions <MBBatchGeocodeOptions>
/// Initializes a forward batch geocode options object with the given query strings.
/// \param queries An array of up to 50 place names or addresses to search for. An individual query may have a maximum of 20 words or numbers; it may have up to 256 characters including spaces and punctuation.
///
- (nonnull instancetype)initWithQueries:(NSArray<NSString *> * _Nonnull)queries OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("GeoLatLngToAddsResult")
@interface GeoLatLngToAddsResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GeoLatLngToMultiAddsResult")
@interface GeoLatLngToMultiAddsResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GeoTextToAddsResult")
@interface GeoTextToAddsResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLRegion;

/// A <code>Placemark</code> object represents a geocoder result. A placemark associates identifiers, geographic data, and contact information with a particular latitude and longitude. It is possible to explicitly create a placemark object from another placemark object; however, placemark objects are generally created for you via the <code>Geocoder.geocode(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Placemark")
@interface MBPlacemark : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// A string that uniquely identifies the feature.
/// The identifier takes the form <tt><var>index</var>.<var>id</var></tt>, where <var>index</var> corresponds to the <code>scope</code> property and <var>id</var> is a number that is unique to the feature but may change when the data source is updated.
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// The common name of the placemark.
/// If the placemark represents an address, the value of this property consists of only the street address, not the full address. Otherwise, if the placemark represents a point of interest or other place, the value of this property consists of only the common name, not the names of any containing administrative areas.
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable address;
/// A standard code uniquely identifying the placemark.
/// If the placemark represents a country, the value of this property is the country’s <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. If the placemark represents a top-level subdivision of a country, such as a state or province, the value of this property is the subdivision’s <a href="https://en.wikipedia.org/wiki/ISO_3166-2">ISO 3166-2</a> code. Otherwise, the value of this property is <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable code;
/// The fully qualified name of the placemark.
/// If the placemark represents an address or point of interest, the value of this property includes the full address. Otherwise, the value of this property includes any containing administrative areas.
@property (nonatomic, copy) NSString * _Nullable qualifiedName;
/// The placemark’s scope.
/// The scope offers a general indication of the size or importance of the feature represented by the placemark – in other words, how local the feature is.
@property (nonatomic, readonly) MBPlacemarkScope scope;
/// The identifier of the placemark’s <a href="https://www.wikidata.org/">Wikidata</a> item, if known.
/// The item identifier consists of “Q” followed by a number. Prepend <code>https://www.wikidata.org/wiki/</code> to get the URL to the Wikidata item page.
/// The Wikidata item contains structured information about the feature represented by the placemark. It also links to corresponding entries in various free content or open data resources, including Wikipedia, Wikimedia Commons, Wikivoyage, and Freebase.
@property (nonatomic, readonly, copy) NSString * _Nullable wikidataItemIdentifier;
/// An array of keywords that describe the genre of the point of interest represented by the placemark.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable genres;
/// Name of the <a href="https://www.mapbox.com/maki/">Maki</a> icon that most precisely identifies the placemark.
/// The icon is determined based on the placemark’s scope and any available genres.
@property (nonatomic, readonly, copy) NSString * _Nullable imageName;
/// The placemark’s geographic center.
@property (nonatomic, strong) CLLocation * _Nullable location;
/// A region object indicating in some fashion the geographic extents of the placemark.
/// When this property is not <code>nil</code>, it is currently always a <code>RectangularRegion</code>. In the future, it may be another type of <code>CLRegion</code>.
@property (nonatomic, strong) CLRegion * _Nullable region;
/// The placemark’s postal address.
/// To format the postal address, use a <code>CNPostalAddressFormatter</code> object.
@property (nonatomic, readonly, strong) CNPostalAddress * _Nullable postalAddress SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0);
/// A dictionary containing the Contacts keys and values for the placemark.
/// The keys in this dictionary are those defined by the Contacts framework and used to access address information for a person or business. For a list of the keys that can be set in this dictionary, see the “Postal Address Properties” constants in <em>CNPostalAddress Reference</em> and in this module.
/// On iOS 9.0 and above, most of the information in this dictionary is also contained in the <code>CNPostalAddress</code> object stored in the <code>postalAddress</code> property.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable addressDictionary;
/// The phone number associated with the business represented by the placemark.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// An array of placemarks representing the hierarchy of administrative areas containing the feature represented by this placemark.
/// The array is sorted in order from the smallest, most local administrative area to the largest administrative area.
@property (nonatomic, readonly, copy) NSArray<MBPlacemark *> * _Nullable superiorPlacemarks;
/// A placemark representing the country containing the feature represented by this placemark.
/// To get the country’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable country;
/// A placemark representing the postal code area containing the feature represented by this placemark.
/// To get the postal code itself, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable postalCode;
/// A placemark representing the region containing the feature represented by this placemark.
/// To get the region’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable administrativeRegion;
/// A placemark representing the district containing the feature represented by this placemark.
/// To get the district’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable district;
/// A placemark representing the place containing the feature represented by this placemark.
/// To get the place’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable place;
/// A placemark representing the neighborhood containing the feature represented by this placemark.
/// To get the neighborhood’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable neighborhood;
/// The name of the street associated with the placemark.
@property (nonatomic, readonly, copy) NSString * _Nullable thoroughfare;
/// An identifier indicating the location along the street at which you can find the feature represented by the placemark.
/// Typically, this property contains the house number and/or unit number of a business or residence.
@property (nonatomic, readonly, copy) NSString * _Nullable subThoroughfare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A concrete subclass of <code>Placemark</code> to represent results of geocoding requests.
SWIFT_CLASS_NAMED("GeocodedPlacemark")
@interface MBGeocodedPlacemark : MBPlacemark
/// An array of locations that serve as hints for navigating to the placemark.
/// If the <code>GeocodeOptions.includesRoutableLocations</code> property is set to <code>true</code>, this property contains locations that are suitable to use as a waypoint in a routing engine such as MapboxDirections.swift. Otherwise, if the <code>GeocodeOptions.includesRoutableLocations</code> property is set to <code>false</code>, this property is set to <code>nil</code>.
/// For the placemark’s geographic center, use the <code>location</code> property. The routable locations may differ from the geographic center. For example, if a house’s driveway leads to a street other than the nearest street (by straight-line distance), then this property may contain the location where the driveway meets the street. A route to the placemark’s geographic center may be impassable, but a route to the routable location would end on the correct street with access to the house.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nullable routableLocations;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable genres;
@property (nonatomic, readonly, copy) NSString * _Nullable imageName;
/// A numerical score from 0 (least relevant) to 0.99 (most relevant) measuring
/// how well each returned feature matches the query. Use this property to
/// remove results that don’t fully match the query.
@property (nonatomic) double relevance;
@property (nonatomic, readonly, strong) CNPostalAddress * _Nullable postalAddress SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0);
@property (nonatomic, readonly, copy) NSDictionary * _Nullable addressDictionary;
/// The phone number to contact a business at this location.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// The placemark’s precision.
/// The precision offers a general indication of the potential distance between the <code>location</code> property and the feature’s actual real-world location.
@property (nonatomic, readonly) MBPlacemarkPrecision _Nullable precision;
@end

@class MBViettelPlacemark;
@class NSError;
@class NSURLSessionDataTask;

/// A geocoder object that allows you to query the <a href="https://www.mapbox.com/api-documentation/search/#geocoding">Mapbox Geocoding API</a> for known places corresponding to a given location. The query may take the form of a geographic coordinate or a human-readable string.
/// The geocoder object allows you to perform both forward and reverse geocoding. <em>Forward geocoding</em> takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query. <em>Reverse geocoding</em> takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location.
/// Each result produced by the geocoder object is stored in a <code>Placemark</code> object. Depending on your query and the available data, the placemark object may contain a variety of information, such as the name, address, region, or contact information for a place, or some combination thereof.
SWIFT_CLASS_NAMED("Geocoder")
@interface MBGeocoder : NSObject
/// The shared geocoder object.
/// To use this object, a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBGeocoder * _Nonnull sharedGeocoder;)
+ (MBGeocoder * _Nonnull)sharedGeocoder SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created geocoder object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the geocoder object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The Mapbox Geocoding API endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created geocoder object with an optional access token.
/// The geocoder object sends requests to the Mapbox Geocoding API endpoint.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the geocoder object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Submits a geocoding request to search for placemarks and delivers the results to the given closure.
/// This method retrieves the placemarks asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the placemarks.
/// Geocoding results may be displayed atop a Mapbox map. They may be cached but may not be stored permanently. To use the results in other contexts or store them permanently, use the <code>batchGeocode(_:completionHandler:)</code> method with a Mapbox enterprise plan.
/// \param options A <code>ForwardGeocodeOptions</code> or <code>ReverseGeocodeOptions</code> object indicating what to search for.
///
/// \param completionHandler The closure (block) to call with the resulting placemarks. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting placemarks, cancel this task.
- (NSURLSessionDataTask * _Nonnull)geocodeWithOptions:(MBGeocodeOptions * _Nonnull)options uid:(NSString * _Nullable)uid completionHandler:(void (^ _Nonnull)(NSArray<MBViettelPlacemark *> * _Nullable, NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Submits a batch geocoding request to search for placemarks and delivers the results to the given closure.
/// This method retrieves the placemarks asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the placemarks.
/// Batch geocoding requires a Mapbox enterprise plan and allows you to store the resulting placemark data as part of a private database.
/// \param options A <code>ForwardBatchGeocodeOptions</code> or <code>ReverseBatchGeocodeOptions</code> object indicating what to search for.
///
/// \param completionHandler The closure (block) to call with the resulting placemarks. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting placemarks, cancel this task.
- (NSURLSessionDataTask * _Nonnull)batchGeocodeWithOptions:(MBGeocodeOptions <MBBatchGeocodeOptions> * _Nonnull)options uid:(NSString * _Nonnull)uid completionHandler:(void (^ _Nonnull)(NSArray<NSArray<MBViettelPlacemark *> *> * _Nullable, NSArray<NSString *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the geocodes from the API.
- (NSURL * _Nonnull)urlForGeocoding:(MBGeocodeOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - latlng to address
/// \param f getaddr(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 16.059366,108.208236)
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceLatlngToAddress:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - multi latlng to address
/// \param f getmultiaddr(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 21.044844,105.852367;21.044844,105.835372)
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceMultiLatlngToAddress:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - text to address
/// \param t text search(kiểu String)
///
/// \param off offset
///
/// \param lm limit
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceTextToAddress:(MBGeocodeOptions * _Nonnull)options textSearch:(NSString * _Nonnull)textSearch offset:(NSString * _Nonnull)offset limit:(NSString * _Nonnull)limit SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - search around
/// \param f search(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 16.059366,108.208236)
///
/// \param t text search(kiểu String)
///
/// \param r bán kính mét(kiểu int)
///
/// \param off offset
///
/// \param lm limit
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceSearchAround:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng textSearch:(NSString * _Nonnull)textSearch radius:(NSString * _Nonnull)radius offset:(NSString * _Nonnull)offset limit:(NSString * _Nonnull)limit SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by point
/// \param f point(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 16.059366,108.208236)
///
/// \param rt 255(cố định không thay đổi param này)
///
/// \param l=1 trả về Tỉnh thành,  l=2: trả về quận,huyện, l=3: trả về xã,phường
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByPoint:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by code
/// \param f code(cố định không thay đổi parram này)
///
/// \param code mã hành chính (ví dụ 79)
///
/// \param rt 255(cố định không thay đổi parram này)
///
/// \param l=1 trả về Tỉnh thành, l=2: trả về quận,huyện, l=3: trả về xã,phường
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByCode:(MBGeocodeOptions * _Nonnull)options code:(NSString * _Nonnull)code returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by circle
/// <ul>
///   <li>
///     parameter
///   </li>
/// </ul>
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByCircle:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng radius:(NSString * _Nonnull)radius returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by boundary
/// <ul>
///   <li>
///     parameter
///   </li>
/// </ul>
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByBoundary:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDataTask * _Nonnull)geoserviceLatlngToAddressWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng completionHandler:(void (^ _Nonnull)(GeoLatLngToAddsResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)geoserviceMultiLatlngToAddressWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLngString completionHandler:(void (^ _Nonnull)(GeoLatLngToMultiAddsResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)geoserviceTextToAddressWithOptions:(MBGeocodeOptions * _Nonnull)options textSearch:(NSString * _Nullable)textSearch offset:(NSString * _Nullable)offset limit:(NSString * _Nullable)limit completionHandler:(void (^ _Nonnull)(GeoTextToAddsResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)geoserviceSearchAroundWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng textSearch:(NSString * _Nullable)textSearch radius:(NSString * _Nullable)radius offset:(NSString * _Nullable)offset limit:(NSString * _Nullable)limit completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByPointWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(AdminPointResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByCodeWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)code returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByCircleWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng radius:(NSString * _Nullable)radius returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByBoundaryWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// A concrete subclass of <code>Placemark</code> to represent entries in a <code>GeocodedPlacemark</code> object’s <code>superiorPlacemarks</code> property. These entries are like top-level geocoding results, except that they lack location information and are flatter, with properties directly at the top level.
SWIFT_CLASS_NAMED("QualifyingPlacemark")
@interface MBQualifyingPlacemark : MBPlacemark
@end

@class NSCoder;

/// The <code>RectangularRegion</code> class defines a rectangular bounding box for a geographic region.
SWIFT_CLASS_NAMED("RectangularRegion")
@interface MBRectangularRegion : CLRegion
/// Coordinate at the southwest corner.
@property (nonatomic) CLLocationCoordinate2D southWest;
/// Coordinate at the northeast corner.
@property (nonatomic) CLLocationCoordinate2D northEast;
/// Creates a rectangular region with the given southwest and northeast corners.
/// <code>southWest</code> must be to the southwest of <code>northEast</code>. The region may not span the antimeridian. If you need to restrict a query to a region that spans the antimeridian, such as the region that encompasses Fiji, perform two queries each limited to the region on either side of the antimeridian, then combine the results.
/// \param southWest The southwesternmost geographic coordinate that lies within the region.
///
/// \param northEast The northeasternmost geographic coordinate that lies within the region.
///
- (nonnull instancetype)initWithSouthWest:(CLLocationCoordinate2D)southWest northEast:(CLLocationCoordinate2D)northEast OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value indicating whether the bounding box contains the specified coordinate.
- (BOOL)containsLocationCoordinate2D:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A structure that specifies the criteria for reverse geocoding results. <em>Reverse geocoding</em> takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location.
SWIFT_CLASS_NAMED("ReverseGeocodeOptions")
@interface MBReverseGeocodeOptions : MBGeocodeOptions
/// Initializes a reverse geocode options object with the given coordinate pair.
/// \param coordinate A coordinate pair to search for.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate;
/// Initializes a reverse geocode options object with the given <code>CLLocation</code> object.
/// \param location A <code>CLLocation</code> object to search for.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location;
@end


/// A structure that specifies the criteria for reverse geocoding results. Reverse geocoding takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location.
SWIFT_CLASS_NAMED("ReverseBatchGeocodeOptions")
@interface MBReverseBatchGeocodeOptions : MBReverseGeocodeOptions <MBBatchGeocodeOptions>
/// Initializes a reverse batch geocode options object with the given coordinate pairs.
/// \param coordinates An array of up to 50 coordinate pairs to search for.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
/// Initializes a reverse batch geocode options object with the given <code>CLLocation</code> objects.
/// \param locations An array of up to 50 <code>CLLocation</code> objects to search for.
///
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end



/// A concrete subclass of <code>Placemark</code> to represent entries in a <code>ViettelPlacemark</code> object’s <code>superiorPlacemarks</code> property. These entries are like top-level geocoding results, except that they lack location information and are flatter, with properties directly at the top level.
SWIFT_CLASS_NAMED("ViettelPlacemark")
@interface MBViettelPlacemark : MBPlacemark
/// A numerical score from 0 (least relevant) to 0.99 (most relevant) measuring
/// how well each returned feature matches the query. Use this property to
/// remove results that don’t fully match the query.
@property (nonatomic) double relevance;
@property (nonatomic) NSInteger poiType;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable placeType;
@property (nonatomic) BOOL isSaved;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#import <MapboxGeocoder/MapboxGeocoder.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapboxGeocoder",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("AdminPointResult")
@interface AdminPointResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Objects that conform to the <code>BatchGeocodeOptions</code> protocol specify the criteria for batch geocoding results returned by the Mapbox Geocoding API.
/// You can include up to 50 forward geocoding queries in a single request. Each query in a batch request counts individually against your account’s rate limits.
/// Pass an object conforming to this protocol into the <code>Geocoder.batchGeocode(_:completionHandler:)</code> method.
SWIFT_PROTOCOL_NAMED("BatchGeocodeOptions")
@protocol MBBatchGeocodeOptions
@end



@class MBRectangularRegion;

/// A structure that specifies the criteria for results returned by the Mapbox Geocoding API.
/// You do not create instances of <code>GeocodeOptions</code> directly. Instead, you create instances of <code>ForwardGeocodeOptions</code> and <code>ReverseGeocodeOptions</code>, depending on the kind of geocoding you want to perform:
/// <ul>
///   <li>
///     <em>Forward geocoding</em> takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query. To perform forward geocoding, use a <code>ForwardGeocodeOptions</code> object.
///   </li>
///   <li>
///     <em>Reverse geocoding</em> takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location. To perform reverse geocoding, use a <code>ReverseGeocodeOptions</code> object.
///   </li>
/// </ul>
/// Pass an instance of either class into the <code>Geocoder.geocode(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("GeocodeOptions")
@interface MBGeocodeOptions : NSObject
/// An array of <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> country codes specifying the countries in which the results may lie. The codes may appear in any order and are case-insensitive.
/// By default, no country codes are specified.
/// To find out what kinds of results are available for a particular country, consult <a href="https://www.mapbox.com/geocoding/#coverage">the Geocoding API’s coverage map</a>.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable allowedISOCountryCodes;
/// A location to use as a hint when looking up the specified address.
/// This property prioritizes results that are close to a specific location, which is typically the user’s current location. If the value of this property is <code>nil</code> – which it is by default – no specific location is prioritized.
@property (nonatomic, strong) CLLocation * _Nullable focalLocation;
/// The bitmask of placemark scopes, such as country and neighborhood, to include in the results.
/// The default value of this property is <code>PlacemarkScope.all</code>, which includes all scopes.
@property (nonatomic) MBPlacemarkScope allowedScopes;
/// The region in which each resulting placemark must be located.
/// By default, no region is specified, so results may be located anywhere in the world.
@property (nonatomic, strong) MBRectangularRegion * _Nullable allowedRegion;
/// Limit the number of results returned. For forward geocoding, the default is <code>5</code> and the maximum is <code>10</code>. For reverse geocoding, the default is <code>1</code> and the maximum is <code>5</code>.
@property (nonatomic) NSUInteger maximumResultCount;
/// The locale in which results should be returned.
/// This property affects the language of returned results; generally speaking, it does not determine which results are found. If the Geocoding API does not recognize the language code, it may fall back to another language or the default language. Components other than the language code, such as the country and script codes, are ignored.
/// By default, this property is set to <code>nil</code>, causing results to be in the default language.
/// experiment:
/// This option is experimental.
@property (nonatomic, copy) NSLocale * _Nullable locale;
/// A Boolean value that determines whether the resulting placemarks have the <code>Placemark.routableLocation</code> property set.
@property (nonatomic) BOOL includesRoutableLocations;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CNPostalAddress;

/// A structure that specifies the criteria for forward geocoding results. Forward geocoding takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query.
SWIFT_CLASS_NAMED("ForwardGeocodeOptions")
@interface MBForwardGeocodeOptions : MBGeocodeOptions
/// Initializes a forward geocode options object with the given query string.
/// \param query A place name or address to search for. The query may have a maximum of 20 words or numbers; it may have up to 256 characters including spaces and punctuation.
///
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query;
/// Initializes a forward geocode options object with the given postal address object.
/// \param postalAddress A <code>CNPostalAddress</code> object to search for.
///
- (nonnull instancetype)initWithPostalAddress:(CNPostalAddress * _Nonnull)postalAddress SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0);
@end


/// A structure that specifies the criteria for forward batch geocoding results. Forward geocoding takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query.
SWIFT_CLASS_NAMED("ForwardBatchGeocodeOptions")
@interface MBForwardBatchGeocodeOptions : MBForwardGeocodeOptions <MBBatchGeocodeOptions>
/// Initializes a forward batch geocode options object with the given query strings.
/// \param queries An array of up to 50 place names or addresses to search for. An individual query may have a maximum of 20 words or numbers; it may have up to 256 characters including spaces and punctuation.
///
- (nonnull instancetype)initWithQueries:(NSArray<NSString *> * _Nonnull)queries OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("GeoLatLngToAddsResult")
@interface GeoLatLngToAddsResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GeoLatLngToMultiAddsResult")
@interface GeoLatLngToMultiAddsResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GeoTextToAddsResult")
@interface GeoTextToAddsResult : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLRegion;

/// A <code>Placemark</code> object represents a geocoder result. A placemark associates identifiers, geographic data, and contact information with a particular latitude and longitude. It is possible to explicitly create a placemark object from another placemark object; however, placemark objects are generally created for you via the <code>Geocoder.geocode(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Placemark")
@interface MBPlacemark : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// A string that uniquely identifies the feature.
/// The identifier takes the form <tt><var>index</var>.<var>id</var></tt>, where <var>index</var> corresponds to the <code>scope</code> property and <var>id</var> is a number that is unique to the feature but may change when the data source is updated.
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// The common name of the placemark.
/// If the placemark represents an address, the value of this property consists of only the street address, not the full address. Otherwise, if the placemark represents a point of interest or other place, the value of this property consists of only the common name, not the names of any containing administrative areas.
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable address;
/// A standard code uniquely identifying the placemark.
/// If the placemark represents a country, the value of this property is the country’s <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. If the placemark represents a top-level subdivision of a country, such as a state or province, the value of this property is the subdivision’s <a href="https://en.wikipedia.org/wiki/ISO_3166-2">ISO 3166-2</a> code. Otherwise, the value of this property is <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable code;
/// The fully qualified name of the placemark.
/// If the placemark represents an address or point of interest, the value of this property includes the full address. Otherwise, the value of this property includes any containing administrative areas.
@property (nonatomic, copy) NSString * _Nullable qualifiedName;
/// The placemark’s scope.
/// The scope offers a general indication of the size or importance of the feature represented by the placemark – in other words, how local the feature is.
@property (nonatomic, readonly) MBPlacemarkScope scope;
/// The identifier of the placemark’s <a href="https://www.wikidata.org/">Wikidata</a> item, if known.
/// The item identifier consists of “Q” followed by a number. Prepend <code>https://www.wikidata.org/wiki/</code> to get the URL to the Wikidata item page.
/// The Wikidata item contains structured information about the feature represented by the placemark. It also links to corresponding entries in various free content or open data resources, including Wikipedia, Wikimedia Commons, Wikivoyage, and Freebase.
@property (nonatomic, readonly, copy) NSString * _Nullable wikidataItemIdentifier;
/// An array of keywords that describe the genre of the point of interest represented by the placemark.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable genres;
/// Name of the <a href="https://www.mapbox.com/maki/">Maki</a> icon that most precisely identifies the placemark.
/// The icon is determined based on the placemark’s scope and any available genres.
@property (nonatomic, readonly, copy) NSString * _Nullable imageName;
/// The placemark’s geographic center.
@property (nonatomic, strong) CLLocation * _Nullable location;
/// A region object indicating in some fashion the geographic extents of the placemark.
/// When this property is not <code>nil</code>, it is currently always a <code>RectangularRegion</code>. In the future, it may be another type of <code>CLRegion</code>.
@property (nonatomic, strong) CLRegion * _Nullable region;
/// The placemark’s postal address.
/// To format the postal address, use a <code>CNPostalAddressFormatter</code> object.
@property (nonatomic, readonly, strong) CNPostalAddress * _Nullable postalAddress SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0);
/// A dictionary containing the Contacts keys and values for the placemark.
/// The keys in this dictionary are those defined by the Contacts framework and used to access address information for a person or business. For a list of the keys that can be set in this dictionary, see the “Postal Address Properties” constants in <em>CNPostalAddress Reference</em> and in this module.
/// On iOS 9.0 and above, most of the information in this dictionary is also contained in the <code>CNPostalAddress</code> object stored in the <code>postalAddress</code> property.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable addressDictionary;
/// The phone number associated with the business represented by the placemark.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// An array of placemarks representing the hierarchy of administrative areas containing the feature represented by this placemark.
/// The array is sorted in order from the smallest, most local administrative area to the largest administrative area.
@property (nonatomic, readonly, copy) NSArray<MBPlacemark *> * _Nullable superiorPlacemarks;
/// A placemark representing the country containing the feature represented by this placemark.
/// To get the country’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable country;
/// A placemark representing the postal code area containing the feature represented by this placemark.
/// To get the postal code itself, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable postalCode;
/// A placemark representing the region containing the feature represented by this placemark.
/// To get the region’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable administrativeRegion;
/// A placemark representing the district containing the feature represented by this placemark.
/// To get the district’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable district;
/// A placemark representing the place containing the feature represented by this placemark.
/// To get the place’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable place;
/// A placemark representing the neighborhood containing the feature represented by this placemark.
/// To get the neighborhood’s name, use the <code>name</code> property of the object stored in this property.
@property (nonatomic, readonly, strong) MBPlacemark * _Nullable neighborhood;
/// The name of the street associated with the placemark.
@property (nonatomic, readonly, copy) NSString * _Nullable thoroughfare;
/// An identifier indicating the location along the street at which you can find the feature represented by the placemark.
/// Typically, this property contains the house number and/or unit number of a business or residence.
@property (nonatomic, readonly, copy) NSString * _Nullable subThoroughfare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A concrete subclass of <code>Placemark</code> to represent results of geocoding requests.
SWIFT_CLASS_NAMED("GeocodedPlacemark")
@interface MBGeocodedPlacemark : MBPlacemark
/// An array of locations that serve as hints for navigating to the placemark.
/// If the <code>GeocodeOptions.includesRoutableLocations</code> property is set to <code>true</code>, this property contains locations that are suitable to use as a waypoint in a routing engine such as MapboxDirections.swift. Otherwise, if the <code>GeocodeOptions.includesRoutableLocations</code> property is set to <code>false</code>, this property is set to <code>nil</code>.
/// For the placemark’s geographic center, use the <code>location</code> property. The routable locations may differ from the geographic center. For example, if a house’s driveway leads to a street other than the nearest street (by straight-line distance), then this property may contain the location where the driveway meets the street. A route to the placemark’s geographic center may be impassable, but a route to the routable location would end on the correct street with access to the house.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nullable routableLocations;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable genres;
@property (nonatomic, readonly, copy) NSString * _Nullable imageName;
/// A numerical score from 0 (least relevant) to 0.99 (most relevant) measuring
/// how well each returned feature matches the query. Use this property to
/// remove results that don’t fully match the query.
@property (nonatomic) double relevance;
@property (nonatomic, readonly, strong) CNPostalAddress * _Nullable postalAddress SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0);
@property (nonatomic, readonly, copy) NSDictionary * _Nullable addressDictionary;
/// The phone number to contact a business at this location.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// The placemark’s precision.
/// The precision offers a general indication of the potential distance between the <code>location</code> property and the feature’s actual real-world location.
@property (nonatomic, readonly) MBPlacemarkPrecision _Nullable precision;
@end

@class MBViettelPlacemark;
@class NSError;
@class NSURLSessionDataTask;

/// A geocoder object that allows you to query the <a href="https://www.mapbox.com/api-documentation/search/#geocoding">Mapbox Geocoding API</a> for known places corresponding to a given location. The query may take the form of a geographic coordinate or a human-readable string.
/// The geocoder object allows you to perform both forward and reverse geocoding. <em>Forward geocoding</em> takes a human-readable query, such as a place name or address, and produces any number of geographic coordinates that correspond to that query. <em>Reverse geocoding</em> takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location.
/// Each result produced by the geocoder object is stored in a <code>Placemark</code> object. Depending on your query and the available data, the placemark object may contain a variety of information, such as the name, address, region, or contact information for a place, or some combination thereof.
SWIFT_CLASS_NAMED("Geocoder")
@interface MBGeocoder : NSObject
/// The shared geocoder object.
/// To use this object, a Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a> should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MBGeocoder * _Nonnull sharedGeocoder;)
+ (MBGeocoder * _Nonnull)sharedGeocoder SWIFT_WARN_UNUSED_RESULT;
/// Initializes a newly created geocoder object with an optional access token and host.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the geocoder object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The Mapbox Geocoding API endpoint is used by default.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created geocoder object with an optional access token.
/// The geocoder object sends requests to the Mapbox Geocoding API endpoint.
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the geocoder object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nullable)accessToken;
/// Submits a geocoding request to search for placemarks and delivers the results to the given closure.
/// This method retrieves the placemarks asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the placemarks.
/// Geocoding results may be displayed atop a Mapbox map. They may be cached but may not be stored permanently. To use the results in other contexts or store them permanently, use the <code>batchGeocode(_:completionHandler:)</code> method with a Mapbox enterprise plan.
/// \param options A <code>ForwardGeocodeOptions</code> or <code>ReverseGeocodeOptions</code> object indicating what to search for.
///
/// \param completionHandler The closure (block) to call with the resulting placemarks. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting placemarks, cancel this task.
- (NSURLSessionDataTask * _Nonnull)geocodeWithOptions:(MBGeocodeOptions * _Nonnull)options uid:(NSString * _Nullable)uid completionHandler:(void (^ _Nonnull)(NSArray<MBViettelPlacemark *> * _Nullable, NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Submits a batch geocoding request to search for placemarks and delivers the results to the given closure.
/// This method retrieves the placemarks asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the placemarks.
/// Batch geocoding requires a Mapbox enterprise plan and allows you to store the resulting placemark data as part of a private database.
/// \param options A <code>ForwardBatchGeocodeOptions</code> or <code>ReverseBatchGeocodeOptions</code> object indicating what to search for.
///
/// \param completionHandler The closure (block) to call with the resulting placemarks. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting placemarks, cancel this task.
- (NSURLSessionDataTask * _Nonnull)batchGeocodeWithOptions:(MBGeocodeOptions <MBBatchGeocodeOptions> * _Nonnull)options uid:(NSString * _Nonnull)uid completionHandler:(void (^ _Nonnull)(NSArray<NSArray<MBViettelPlacemark *> *> * _Nullable, NSArray<NSString *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the geocodes from the API.
- (NSURL * _Nonnull)urlForGeocoding:(MBGeocodeOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - latlng to address
/// \param f getaddr(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 16.059366,108.208236)
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceLatlngToAddress:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - multi latlng to address
/// \param f getmultiaddr(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 21.044844,105.852367;21.044844,105.835372)
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceMultiLatlngToAddress:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - text to address
/// \param t text search(kiểu String)
///
/// \param off offset
///
/// \param lm limit
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceTextToAddress:(MBGeocodeOptions * _Nonnull)options textSearch:(NSString * _Nonnull)textSearch offset:(NSString * _Nonnull)offset limit:(NSString * _Nonnull)limit SWIFT_WARN_UNUSED_RESULT;
/// Geoservice - search around
/// \param f search(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 16.059366,108.208236)
///
/// \param t text search(kiểu String)
///
/// \param r bán kính mét(kiểu int)
///
/// \param off offset
///
/// \param lm limit
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForGeoserviceSearchAround:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng textSearch:(NSString * _Nonnull)textSearch radius:(NSString * _Nonnull)radius offset:(NSString * _Nonnull)offset limit:(NSString * _Nonnull)limit SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by point
/// \param f point(cố định không thay đổi parram này)
///
/// \param pt LatLng(kiểu String ví dụ 16.059366,108.208236)
///
/// \param rt 255(cố định không thay đổi param này)
///
/// \param l=1 trả về Tỉnh thành,  l=2: trả về quận,huyện, l=3: trả về xã,phường
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByPoint:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by code
/// \param f code(cố định không thay đổi parram này)
///
/// \param code mã hành chính (ví dụ 79)
///
/// \param rt 255(cố định không thay đổi parram này)
///
/// \param l=1 trả về Tỉnh thành, l=2: trả về quận,huyện, l=3: trả về xã,phường
///
/// \param k accessToken
///
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByCode:(MBGeocodeOptions * _Nonnull)options code:(NSString * _Nonnull)code returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by circle
/// <ul>
///   <li>
///     parameter
///   </li>
/// </ul>
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByCircle:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng radius:(NSString * _Nonnull)radius returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Adminservice - by boundary
/// <ul>
///   <li>
///     parameter
///   </li>
/// </ul>
///
/// returns:
/// The HTTP URL used to fetch the data  from the API.
- (NSURL * _Nonnull)urlForAdminserviceByBoundary:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nonnull)LatLng returnType:(NSString * _Nonnull)returnType type:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDataTask * _Nonnull)geoserviceLatlngToAddressWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng completionHandler:(void (^ _Nonnull)(GeoLatLngToAddsResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)geoserviceMultiLatlngToAddressWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLngString completionHandler:(void (^ _Nonnull)(GeoLatLngToMultiAddsResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)geoserviceTextToAddressWithOptions:(MBGeocodeOptions * _Nonnull)options textSearch:(NSString * _Nullable)textSearch offset:(NSString * _Nullable)offset limit:(NSString * _Nullable)limit completionHandler:(void (^ _Nonnull)(GeoTextToAddsResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)geoserviceSearchAroundWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng textSearch:(NSString * _Nullable)textSearch radius:(NSString * _Nullable)radius offset:(NSString * _Nullable)offset limit:(NSString * _Nullable)limit completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByPointWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(AdminPointResult * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByCodeWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)code returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByCircleWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng radius:(NSString * _Nullable)radius returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (NSURLSessionDataTask * _Nonnull)adminserviceByBoundaryWithOptions:(MBGeocodeOptions * _Nonnull)options LatLng:(NSString * _Nullable)LatLng returnType:(NSString * _Nullable)returnType type:(NSString * _Nullable)type completionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// A concrete subclass of <code>Placemark</code> to represent entries in a <code>GeocodedPlacemark</code> object’s <code>superiorPlacemarks</code> property. These entries are like top-level geocoding results, except that they lack location information and are flatter, with properties directly at the top level.
SWIFT_CLASS_NAMED("QualifyingPlacemark")
@interface MBQualifyingPlacemark : MBPlacemark
@end

@class NSCoder;

/// The <code>RectangularRegion</code> class defines a rectangular bounding box for a geographic region.
SWIFT_CLASS_NAMED("RectangularRegion")
@interface MBRectangularRegion : CLRegion
/// Coordinate at the southwest corner.
@property (nonatomic) CLLocationCoordinate2D southWest;
/// Coordinate at the northeast corner.
@property (nonatomic) CLLocationCoordinate2D northEast;
/// Creates a rectangular region with the given southwest and northeast corners.
/// <code>southWest</code> must be to the southwest of <code>northEast</code>. The region may not span the antimeridian. If you need to restrict a query to a region that spans the antimeridian, such as the region that encompasses Fiji, perform two queries each limited to the region on either side of the antimeridian, then combine the results.
/// \param southWest The southwesternmost geographic coordinate that lies within the region.
///
/// \param northEast The northeasternmost geographic coordinate that lies within the region.
///
- (nonnull instancetype)initWithSouthWest:(CLLocationCoordinate2D)southWest northEast:(CLLocationCoordinate2D)northEast OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value indicating whether the bounding box contains the specified coordinate.
- (BOOL)containsLocationCoordinate2D:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A structure that specifies the criteria for reverse geocoding results. <em>Reverse geocoding</em> takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location.
SWIFT_CLASS_NAMED("ReverseGeocodeOptions")
@interface MBReverseGeocodeOptions : MBGeocodeOptions
/// Initializes a reverse geocode options object with the given coordinate pair.
/// \param coordinate A coordinate pair to search for.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate;
/// Initializes a reverse geocode options object with the given <code>CLLocation</code> object.
/// \param location A <code>CLLocation</code> object to search for.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location;
@end


/// A structure that specifies the criteria for reverse geocoding results. Reverse geocoding takes a geographic coordinate and produces a hierarchy of places, often beginning with an address, that describes the coordinate’s location.
SWIFT_CLASS_NAMED("ReverseBatchGeocodeOptions")
@interface MBReverseBatchGeocodeOptions : MBReverseGeocodeOptions <MBBatchGeocodeOptions>
/// Initializes a reverse batch geocode options object with the given coordinate pairs.
/// \param coordinates An array of up to 50 coordinate pairs to search for.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
/// Initializes a reverse batch geocode options object with the given <code>CLLocation</code> objects.
/// \param locations An array of up to 50 <code>CLLocation</code> objects to search for.
///
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end



/// A concrete subclass of <code>Placemark</code> to represent entries in a <code>ViettelPlacemark</code> object’s <code>superiorPlacemarks</code> property. These entries are like top-level geocoding results, except that they lack location information and are flatter, with properties directly at the top level.
SWIFT_CLASS_NAMED("ViettelPlacemark")
@interface MBViettelPlacemark : MBPlacemark
/// A numerical score from 0 (least relevant) to 0.99 (most relevant) measuring
/// how well each returned feature matches the query. Use this property to
/// remove results that don’t fully match the query.
@property (nonatomic) double relevance;
@property (nonatomic) NSInteger poiType;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable placeType;
@property (nonatomic) BOOL isSaved;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
